IrFile /when.kt
  DUMMY A
  IrFunction public fun testWithSubject(/*0*/ x: kotlin.Any?): kotlin.String
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          BLOCK type=kotlin.String hasResult=true operator=WHEN
            VAR val tmp0_subject: kotlin.Any?
              GET_VAR x type=kotlin.Any? operator=null
            IF type=kotlin.String operator=WHEN
              if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                GET_VAR tmp0_subject type=kotlin.Any? operator=null
                LITERAL Null type=kotlin.Nothing? value='null'
              then: LITERAL String type=kotlin.String value='null'
              else: IF type=kotlin.String operator=WHEN
                if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                  GET_VAR tmp0_subject type=kotlin.Any? operator=null
                  GET_OBJECT A type=A
                then: LITERAL String type=kotlin.String value='A'
                else: IF type=kotlin.String operator=WHEN
                  if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.String
                    GET_VAR tmp0_subject type=kotlin.Any? operator=null
                  then: LITERAL String type=kotlin.String value='String'
                  else: IF type=kotlin.String operator=WHEN
                    if: CALL .contains type=kotlin.Boolean operator=IN
                      $receiver: CALL .setOf type=kotlin.collections.Set<kotlin.Nothing> operator=null
                      element: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Any
                        GET_VAR tmp0_subject type=kotlin.Any? operator=null
                    then: LITERAL String type=kotlin.String value='nothingness?'
                    else: LITERAL String type=kotlin.String value='something'
  IrFunction public fun test(/*0*/ x: kotlin.Any?): kotlin.String
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          IF type=kotlin.String operator=WHEN
            if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=public open operator fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
              GET_VAR x type=kotlin.Any? operator=null
              LITERAL Null type=kotlin.Nothing? value='null'
            then: LITERAL String type=kotlin.String value='null'
            else: IF type=kotlin.String operator=WHEN
              if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=public open operator fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                GET_VAR x type=kotlin.Any? operator=null
                GET_OBJECT A type=A
              then: LITERAL String type=kotlin.String value='A'
              else: IF type=kotlin.String operator=WHEN
                if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.String
                  GET_VAR x type=kotlin.Any? operator=null
                then: LITERAL String type=kotlin.String value='String'
                else: IF type=kotlin.String operator=WHEN
                  if: CALL .contains type=kotlin.Boolean operator=IN
                    $receiver: CALL .setOf type=kotlin.collections.Set<kotlin.Nothing> operator=null
                    element: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Any
                      GET_VAR x type=kotlin.Any? operator=null
                  then: LITERAL String type=kotlin.String value='nothingness?'
                  else: LITERAL String type=kotlin.String value='something'
  IrFunction public fun testComma(/*0*/ x: kotlin.Int): kotlin.String
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          BLOCK type=kotlin.String hasResult=true operator=WHEN
            VAR val tmp0_subject: kotlin.Int
              GET_VAR x type=kotlin.Int operator=null
            IF type=kotlin.String operator=WHEN
              if: IF type=kotlin.Boolean operator=WHEN_COMMA
                if: IF type=kotlin.Boolean operator=WHEN_COMMA
                  if: IF type=kotlin.Boolean operator=WHEN_COMMA
                    if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                      GET_VAR tmp0_subject type=kotlin.Int operator=null
                      LITERAL Int type=kotlin.Int value='1'
                    then: LITERAL Boolean type=kotlin.Boolean value='true'
                    else: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                      GET_VAR tmp0_subject type=kotlin.Int operator=null
                      LITERAL Int type=kotlin.Int value='2'
                  then: LITERAL Boolean type=kotlin.Boolean value='true'
                  else: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                    GET_VAR tmp0_subject type=kotlin.Int operator=null
                    LITERAL Int type=kotlin.Int value='3'
                then: LITERAL Boolean type=kotlin.Boolean value='true'
                else: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                  GET_VAR tmp0_subject type=kotlin.Int operator=null
                  LITERAL Int type=kotlin.Int value='4'
              then: LITERAL String type=kotlin.String value='1234'
              else: IF type=kotlin.String operator=WHEN
                if: IF type=kotlin.Boolean operator=WHEN_COMMA
                  if: IF type=kotlin.Boolean operator=WHEN_COMMA
                    if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                      GET_VAR tmp0_subject type=kotlin.Int operator=null
                      LITERAL Int type=kotlin.Int value='5'
                    then: LITERAL Boolean type=kotlin.Boolean value='true'
                    else: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                      GET_VAR tmp0_subject type=kotlin.Int operator=null
                      LITERAL Int type=kotlin.Int value='6'
                  then: LITERAL Boolean type=kotlin.Boolean value='true'
                  else: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                    GET_VAR tmp0_subject type=kotlin.Int operator=null
                    LITERAL Int type=kotlin.Int value='7'
                then: LITERAL String type=kotlin.String value='567'
                else: IF type=kotlin.String operator=WHEN
                  if: IF type=kotlin.Boolean operator=WHEN_COMMA
                    if: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                      GET_VAR tmp0_subject type=kotlin.Int operator=null
                      LITERAL Int type=kotlin.Int value='8'
                    then: LITERAL Boolean type=kotlin.Boolean value='true'
                    else: BINARY_OP operator=EQEQ type=kotlin.Boolean related=null
                      GET_VAR tmp0_subject type=kotlin.Int operator=null
                      LITERAL Int type=kotlin.Int value='9'
                  then: LITERAL String type=kotlin.String value='89'
                  else: LITERAL String type=kotlin.String value='?'

IrFile /forWithBreakContinue.kt
  IrFunction public fun testForBreak1(/*0*/ ss: kotlin.collections.List<kotlin.String>): kotlin.Unit
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR ss type=kotlin.collections.List<kotlin.String> operator=null
          WHILE operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP_INNER_WHILE
              VAR val s: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=<no-type> hasResult=false operator=null
                BREAK loop.operator=FOR_LOOP_INNER_WHILE depth=0
  IrFunction public fun testForBreak2(/*0*/ ss: kotlin.collections.List<kotlin.String>): kotlin.Unit
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR ss type=kotlin.collections.List<kotlin.String> operator=null
          WHILE operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP_INNER_WHILE
              VAR val s1: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=<no-type> hasResult=false operator=null
                BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP
                  VAR val tmp1_iterator: kotlin.collections.Iterator<kotlin.String>
                    CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
                      $this: GET_VAR ss type=kotlin.collections.List<kotlin.String> operator=null
                  WHILE operator=FOR_LOOP_INNER_WHILE
                    condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
                    body: BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP_INNER_WHILE
                      VAR val s2: kotlin.String
                        CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                          $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
                      BLOCK type=<no-type> hasResult=false operator=null
                        BREAK loop.operator=FOR_LOOP_INNER_WHILE depth=1
                        BREAK loop.operator=FOR_LOOP_INNER_WHILE depth=0
                        BREAK loop.operator=FOR_LOOP_INNER_WHILE depth=0
                BREAK loop.operator=FOR_LOOP_INNER_WHILE depth=0
  IrFunction public fun testForContinue1(/*0*/ ss: kotlin.collections.List<kotlin.String>): kotlin.Unit
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR ss type=kotlin.collections.List<kotlin.String> operator=null
          WHILE operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP_INNER_WHILE
              VAR val s: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=<no-type> hasResult=false operator=null
                CONTINUE loop.operator=FOR_LOOP_INNER_WHILE depth=0
  IrFunction public fun testForContinue2(/*0*/ ss: kotlin.collections.List<kotlin.String>): kotlin.Unit
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR ss type=kotlin.collections.List<kotlin.String> operator=null
          WHILE operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP_INNER_WHILE
              VAR val s1: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=<no-type> hasResult=false operator=null
                BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP
                  VAR val tmp1_iterator: kotlin.collections.Iterator<kotlin.String>
                    CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
                      $this: GET_VAR ss type=kotlin.collections.List<kotlin.String> operator=null
                  WHILE operator=FOR_LOOP_INNER_WHILE
                    condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
                    body: BLOCK type=kotlin.Unit hasResult=false operator=FOR_LOOP_INNER_WHILE
                      VAR val s2: kotlin.String
                        CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                          $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
                      BLOCK type=<no-type> hasResult=false operator=null
                        CONTINUE loop.operator=FOR_LOOP_INNER_WHILE depth=1
                        CONTINUE loop.operator=FOR_LOOP_INNER_WHILE depth=0
                        CONTINUE loop.operator=FOR_LOOP_INNER_WHILE depth=0
                CONTINUE loop.operator=FOR_LOOP_INNER_WHILE depth=0

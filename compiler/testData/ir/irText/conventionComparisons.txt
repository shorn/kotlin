IrFile /conventionComparisons.kt
  DUMMY IA
  DUMMY IB
  IrFunction public fun IB.test1(/*0*/ a1: IA, /*1*/ a2: IA): kotlin.Boolean
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: $RECEIVER of: test1 type=IB
              $receiver: GET_VAR a1 type=IA operator=null
              other: GET_VAR a2 type=IA operator=null
  IrFunction public fun IB.test2(/*0*/ a1: IA, /*1*/ a2: IA): kotlin.Boolean
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: $RECEIVER of: test2 type=IB
              $receiver: GET_VAR a1 type=IA operator=null
              other: GET_VAR a2 type=IA operator=null
  IrFunction public fun IB.test3(/*0*/ a1: IA, /*1*/ a2: IA): kotlin.Boolean
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: $RECEIVER of: test3 type=IB
              $receiver: GET_VAR a1 type=IA operator=null
              other: GET_VAR a2 type=IA operator=null
  IrFunction public fun IB.test4(/*0*/ a1: IA, /*1*/ a2: IA): kotlin.Boolean
    IrExpressionBody
      BLOCK type=<no-type> hasResult=false operator=null
        RETURN type=<no-type>
          CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: $RECEIVER of: test4 type=IB
              $receiver: GET_VAR a1 type=IA operator=null
              other: GET_VAR a2 type=IA operator=null

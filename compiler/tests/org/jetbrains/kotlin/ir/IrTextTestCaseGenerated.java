/*
 * Copyright 2010-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.ir;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/ir/irText")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrTextTestCaseGenerated extends AbstractIrTextTestCase {
    public void testAllFilesPresentInIrText() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/ir/irText"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("assignments.kt")
    public void testAssignments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/assignments.kt");
        doTest(fileName);
    }

    @TestMetadata("boxOk.kt")
    public void testBoxOk() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/boxOk.kt");
        doTest(fileName);
    }

    @TestMetadata("callWithReorderedArguments.kt")
    public void testCallWithReorderedArguments() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/callWithReorderedArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("calls.kt")
    public void testCalls() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/calls.kt");
        doTest(fileName);
    }

    @TestMetadata("destructuring1.kt")
    public void testDestructuring1() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/destructuring1.kt");
        doTest(fileName);
    }

    @TestMetadata("dotQualified.kt")
    public void testDotQualified() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/dotQualified.kt");
        doTest(fileName);
    }

    @TestMetadata("extensionPropertyGetterCall.kt")
    public void testExtensionPropertyGetterCall() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/extensionPropertyGetterCall.kt");
        doTest(fileName);
    }

    @TestMetadata("references.kt")
    public void testReferences() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/references.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCasts.kt")
    public void testSmartCasts() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/smartCasts.kt");
        doTest(fileName);
    }

    @TestMetadata("smartCastsWithDestructuring.kt")
    public void testSmartCastsWithDestructuring() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/smartCastsWithDestructuring.kt");
        doTest(fileName);
    }

    @TestMetadata("smoke.kt")
    public void testSmoke() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/ir/irText/smoke.kt");
        doTest(fileName);
    }
}
